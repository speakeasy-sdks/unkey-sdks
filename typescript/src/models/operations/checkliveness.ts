/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Services = {
    /**
     * The name of the connected metrics service
     */
    metrics: string;
    /**
     * The name of the connected logger service
     */
    logger: string;
    /**
     * The name of the connected ratelimit service
     */
    ratelimit: string;
    /**
     * The name of the connected usagelimit service
     */
    usagelimit: string;
    /**
     * The name of the connected analytics service
     */
    analytics: string;
};

/**
 * The configured services and their status
 */
export type CheckLivenessResponseBody = {
    /**
     * The status of the server
     */
    status: string;
    services: Services;
};

/** @internal */
export namespace Services$ {
    export type Inbound = {
        metrics: string;
        logger: string;
        ratelimit: string;
        usagelimit: string;
        analytics: string;
    };

    export const inboundSchema: z.ZodType<Services, z.ZodTypeDef, Inbound> = z
        .object({
            metrics: z.string(),
            logger: z.string(),
            ratelimit: z.string(),
            usagelimit: z.string(),
            analytics: z.string(),
        })
        .transform((v) => {
            return {
                metrics: v.metrics,
                logger: v.logger,
                ratelimit: v.ratelimit,
                usagelimit: v.usagelimit,
                analytics: v.analytics,
            };
        });

    export type Outbound = {
        metrics: string;
        logger: string;
        ratelimit: string;
        usagelimit: string;
        analytics: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Services> = z
        .object({
            metrics: z.string(),
            logger: z.string(),
            ratelimit: z.string(),
            usagelimit: z.string(),
            analytics: z.string(),
        })
        .transform((v) => {
            return {
                metrics: v.metrics,
                logger: v.logger,
                ratelimit: v.ratelimit,
                usagelimit: v.usagelimit,
                analytics: v.analytics,
            };
        });
}

/** @internal */
export namespace CheckLivenessResponseBody$ {
    export type Inbound = {
        status: string;
        services: Services$.Inbound;
    };

    export const inboundSchema: z.ZodType<CheckLivenessResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string(),
            services: z.lazy(() => Services$.inboundSchema),
        })
        .transform((v) => {
            return {
                status: v.status,
                services: v.services,
            };
        });

    export type Outbound = {
        status: string;
        services: Services$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CheckLivenessResponseBody> = z
        .object({
            status: z.string(),
            services: z.lazy(() => Services$.outboundSchema),
        })
        .transform((v) => {
            return {
                status: v.status,
                services: v.services,
            };
        });
}
