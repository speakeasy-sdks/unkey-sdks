/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeleteApiRequestBody = {
    /**
     * The id of the api to delete
     */
    apiId: string;
};

/**
 * The api was successfully deleted, it may take up to 30s for this to take effect in all regions
 */
export type DeleteApiResponseBody = {};

/** @internal */
export namespace DeleteApiRequestBody$ {
    export type Inbound = {
        apiId: string;
    };

    export const inboundSchema: z.ZodType<DeleteApiRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });

    export type Outbound = {
        apiId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteApiRequestBody> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });
}

/** @internal */
export namespace DeleteApiResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<DeleteApiResponseBody, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteApiResponseBody> =
        z.object({});
}
