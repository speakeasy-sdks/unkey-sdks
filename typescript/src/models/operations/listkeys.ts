/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListKeysRequest = {
    apiId: string;
    limit?: number | undefined;
    cursor?: string | undefined;
    ownerId?: string | undefined;
};

/**
 * The configuration for an api
 */
export type ListKeysResponseBody = {
    keys: Array<components.Key>;
    /**
     * The cursor to use for the next page of results, if no cursor is returned, there are no more results
     */
    cursor?: string | undefined;
    /**
     * The total number of keys for this api
     */
    total: number;
};

/** @internal */
export namespace ListKeysRequest$ {
    export type Inbound = {
        apiId: string;
        limit?: number | undefined;
        cursor?: string | undefined;
        ownerId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListKeysRequest, z.ZodTypeDef, Inbound> = z
        .object({
            apiId: z.string(),
            limit: z.number().int().default(100),
            cursor: z.string().optional(),
            ownerId: z.string().optional(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
            };
        });

    export type Outbound = {
        apiId: string;
        limit: number;
        cursor?: string | undefined;
        ownerId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListKeysRequest> = z
        .object({
            apiId: z.string(),
            limit: z.number().int().default(100),
            cursor: z.string().optional(),
            ownerId: z.string().optional(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
            };
        });
}

/** @internal */
export namespace ListKeysResponseBody$ {
    export type Inbound = {
        keys: Array<components.Key$.Inbound>;
        cursor?: string | undefined;
        total: number;
    };

    export const inboundSchema: z.ZodType<ListKeysResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            keys: z.array(components.Key$.inboundSchema),
            cursor: z.string().optional(),
            total: z.number().int(),
        })
        .transform((v) => {
            return {
                keys: v.keys,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                total: v.total,
            };
        });

    export type Outbound = {
        keys: Array<components.Key$.Outbound>;
        cursor?: string | undefined;
        total: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListKeysResponseBody> = z
        .object({
            keys: z.array(components.Key$.outboundSchema),
            cursor: z.string().optional(),
            total: z.number().int(),
        })
        .transform((v) => {
            return {
                keys: v.keys,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                total: v.total,
            };
        });
}
