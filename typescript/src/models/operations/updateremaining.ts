/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The operation you want to perform on the remaining count
 */
export enum Op {
    Increment = "increment",
    Decrement = "decrement",
    Set = "set",
}

export type UpdateRemainingRequestBody = {
    /**
     * The id of the key you want to modify
     */
    keyId: string;
    /**
     * The operation you want to perform on the remaining count
     */
    op: Op;
    /**
     * The value you want to set, add or subtract the remaining count by
     */
    value: number | null;
};

/**
 * The configuration for an api
 */
export type UpdateRemainingResponseBody = {
    /**
     * The number of remaining requests for this key after updating it. `null` means unlimited.
     */
    remaining: number | null;
};

/** @internal */
export const Op$: z.ZodNativeEnum<typeof Op> = z.nativeEnum(Op);

/** @internal */
export namespace UpdateRemainingRequestBody$ {
    export type Inbound = {
        keyId: string;
        op: Op;
        value: number | null;
    };

    export const inboundSchema: z.ZodType<UpdateRemainingRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            keyId: z.string(),
            op: Op$,
            value: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
                op: v.op,
                value: v.value,
            };
        });

    export type Outbound = {
        keyId: string;
        op: Op;
        value: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRemainingRequestBody> = z
        .object({
            keyId: z.string(),
            op: Op$,
            value: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
                op: v.op,
                value: v.value,
            };
        });
}

/** @internal */
export namespace UpdateRemainingResponseBody$ {
    export type Inbound = {
        remaining: number | null;
    };

    export const inboundSchema: z.ZodType<UpdateRemainingResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            remaining: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                remaining: v.remaining,
            };
        });

    export type Outbound = {
        remaining: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRemainingResponseBody> = z
        .object({
            remaining: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                remaining: v.remaining,
            };
        });
}
