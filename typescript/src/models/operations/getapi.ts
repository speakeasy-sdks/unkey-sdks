/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetApiRequest = {
    apiId: string;
};

/**
 * The configuration for an api
 */
export type GetApiResponseBody = {
    /**
     * The id of the key
     */
    id: string;
    /**
     * The id of the workspace that owns the api
     */
    workspaceId: string;
    /**
     * The name of the api. This is internal and your users will not see this.
     */
    name?: string | undefined;
};

/** @internal */
export namespace GetApiRequest$ {
    export type Inbound = {
        apiId: string;
    };

    export const inboundSchema: z.ZodType<GetApiRequest, z.ZodTypeDef, Inbound> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });

    export type Outbound = {
        apiId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetApiRequest> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });
}

/** @internal */
export namespace GetApiResponseBody$ {
    export type Inbound = {
        id: string;
        workspaceId: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetApiResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            workspaceId: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                workspaceId: v.workspaceId,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        id: string;
        workspaceId: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetApiResponseBody> = z
        .object({
            id: z.string(),
            workspaceId: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                workspaceId: v.workspaceId,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
