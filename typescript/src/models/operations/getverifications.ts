/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The granularity of the usage data to fetch, currently only `day` is supported
 */
export enum Granularity {
    Day = "day",
}

export type GetVerificationsRequest = {
    keyId?: string | undefined;
    ownerId?: string | undefined;
    start?: number | null | undefined;
    end?: number | null | undefined;
    /**
     * The granularity of the usage data to fetch, currently only `day` is supported
     */
    granularity?: Granularity | undefined;
};

export type Verifications = {
    /**
     * The timestamp of the usage data
     */
    time: number;
    /**
     * The number of successful requests
     */
    success: number;
    /**
     * The number of requests that were rate limited
     */
    rateLimited: number;
    /**
     * The number of requests that exceeded the usage limit
     */
    usageExceeded: number;
};

/**
 * The configuration for a single key
 */
export type GetVerificationsResponseBody = {
    verifications: Array<Verifications>;
};

/** @internal */
export const Granularity$: z.ZodNativeEnum<typeof Granularity> = z.nativeEnum(Granularity);

/** @internal */
export namespace GetVerificationsRequest$ {
    export type Inbound = {
        keyId?: string | undefined;
        ownerId?: string | undefined;
        start?: number | null | undefined;
        end?: number | null | undefined;
        granularity?: Granularity | undefined;
    };

    export const inboundSchema: z.ZodType<GetVerificationsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            keyId: z.string().optional(),
            ownerId: z.string().optional(),
            start: z.nullable(z.number().int()).optional(),
            end: z.nullable(z.number().int()).optional(),
            granularity: Granularity$.default(Granularity.Day),
        })
        .transform((v) => {
            return {
                ...(v.keyId === undefined ? null : { keyId: v.keyId }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.start === undefined ? null : { start: v.start }),
                ...(v.end === undefined ? null : { end: v.end }),
                granularity: v.granularity,
            };
        });

    export type Outbound = {
        keyId?: string | undefined;
        ownerId?: string | undefined;
        start?: number | null | undefined;
        end?: number | null | undefined;
        granularity: Granularity;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetVerificationsRequest> = z
        .object({
            keyId: z.string().optional(),
            ownerId: z.string().optional(),
            start: z.nullable(z.number().int()).optional(),
            end: z.nullable(z.number().int()).optional(),
            granularity: Granularity$.default(Granularity.Day),
        })
        .transform((v) => {
            return {
                ...(v.keyId === undefined ? null : { keyId: v.keyId }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.start === undefined ? null : { start: v.start }),
                ...(v.end === undefined ? null : { end: v.end }),
                granularity: v.granularity,
            };
        });
}

/** @internal */
export namespace Verifications$ {
    export type Inbound = {
        time: number;
        success: number;
        rateLimited: number;
        usageExceeded: number;
    };

    export const inboundSchema: z.ZodType<Verifications, z.ZodTypeDef, Inbound> = z
        .object({
            time: z.number().int(),
            success: z.number(),
            rateLimited: z.number(),
            usageExceeded: z.number(),
        })
        .transform((v) => {
            return {
                time: v.time,
                success: v.success,
                rateLimited: v.rateLimited,
                usageExceeded: v.usageExceeded,
            };
        });

    export type Outbound = {
        time: number;
        success: number;
        rateLimited: number;
        usageExceeded: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Verifications> = z
        .object({
            time: z.number().int(),
            success: z.number(),
            rateLimited: z.number(),
            usageExceeded: z.number(),
        })
        .transform((v) => {
            return {
                time: v.time,
                success: v.success,
                rateLimited: v.rateLimited,
                usageExceeded: v.usageExceeded,
            };
        });
}

/** @internal */
export namespace GetVerificationsResponseBody$ {
    export type Inbound = {
        verifications: Array<Verifications$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetVerificationsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            verifications: z.array(z.lazy(() => Verifications$.inboundSchema)),
        })
        .transform((v) => {
            return {
                verifications: v.verifications,
            };
        });

    export type Outbound = {
        verifications: Array<Verifications$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetVerificationsResponseBody> = z
        .object({
            verifications: z.array(z.lazy(() => Verifications$.outboundSchema)),
        })
        .transform((v) => {
            return {
                verifications: v.verifications,
            };
        });
}
