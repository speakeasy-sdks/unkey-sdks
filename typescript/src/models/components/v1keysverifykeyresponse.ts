/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The ratelimit configuration for this key. If this field is null or undefined, the key has no ratelimit.
 */
export type V1KeysVerifyKeyResponseRatelimit = {
    /**
     * Maximum number of requests that can be made inside a window
     */
    limit: number;
    /**
     * Remaining requests after this verification
     */
    remaining: number;
    /**
     * Unix timestamp in milliseconds when the ratelimit will reset
     */
    reset: number;
};

/**
 * If the key is invalid this field will be set to the reason why it is invalid.
 *
 * @remarks
 * Possible values are:
 * - NOT_FOUND: the key does not exist or has expired
 * - FORBIDDEN: the key is not allowed to access the api
 * - USAGE_EXCEEDED: the key has exceeded its request limit
 * - RATE_LIMITED: the key has been ratelimited
 * - UNAUTHORIZED: the key is not authorized
 * - DISABLED: the key is disabled
 * - INSUFFICIENT_PERMISSIONS: you do not have the required permissions to perform this action
 *
 */
export enum Code {
    NotFound = "NOT_FOUND",
    Forbidden = "FORBIDDEN",
    UsageExceeded = "USAGE_EXCEEDED",
    RateLimited = "RATE_LIMITED",
    Unauthorized = "UNAUTHORIZED",
    Disabled = "DISABLED",
    InsufficientPermissions = "INSUFFICIENT_PERMISSIONS",
}

export type V1KeysVerifyKeyResponse = {
    /**
     * The id of the key
     */
    keyId?: string | undefined;
    /**
     * Whether the key is valid or not.
     *
     * @remarks
     * A key could be invalid for a number of reasons, for example if it has expired, has no more verifications left or if it has been deleted.
     */
    valid: boolean;
    /**
     * The name of the key, give keys a name to easily identifiy their purpose
     */
    name?: string | undefined;
    /**
     * The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.
     */
    ownerId?: string | undefined;
    /**
     * Any additional metadata you want to store with the key
     */
    meta?: Record<string, any> | undefined;
    /**
     * The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.
     */
    expires?: number | undefined;
    /**
     * The ratelimit configuration for this key. If this field is null or undefined, the key has no ratelimit.
     */
    ratelimit?: V1KeysVerifyKeyResponseRatelimit | undefined;
    /**
     * The number of requests that can be made with this key before it becomes invalid. If this field is null or undefined, the key has no request limit.
     */
    remaining?: number | undefined;
    /**
     * If the key is invalid this field will be set to the reason why it is invalid.
     *
     * @remarks
     * Possible values are:
     * - NOT_FOUND: the key does not exist or has expired
     * - FORBIDDEN: the key is not allowed to access the api
     * - USAGE_EXCEEDED: the key has exceeded its request limit
     * - RATE_LIMITED: the key has been ratelimited
     * - UNAUTHORIZED: the key is not authorized
     * - DISABLED: the key is disabled
     * - INSUFFICIENT_PERMISSIONS: you do not have the required permissions to perform this action
     *
     */
    code?: Code | undefined;
    /**
     * Sets the key to be enabled or disabled. Disabled keys will not verify.
     */
    enabled?: boolean | undefined;
};

/** @internal */
export namespace V1KeysVerifyKeyResponseRatelimit$ {
    export type Inbound = {
        limit: number;
        remaining: number;
        reset: number;
    };

    export const inboundSchema: z.ZodType<V1KeysVerifyKeyResponseRatelimit, z.ZodTypeDef, Inbound> =
        z
            .object({
                limit: z.number(),
                remaining: z.number(),
                reset: z.number(),
            })
            .transform((v) => {
                return {
                    limit: v.limit,
                    remaining: v.remaining,
                    reset: v.reset,
                };
            });

    export type Outbound = {
        limit: number;
        remaining: number;
        reset: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        V1KeysVerifyKeyResponseRatelimit
    > = z
        .object({
            limit: z.number(),
            remaining: z.number(),
            reset: z.number(),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                remaining: v.remaining,
                reset: v.reset,
            };
        });
}

/** @internal */
export const Code$: z.ZodNativeEnum<typeof Code> = z.nativeEnum(Code);

/** @internal */
export namespace V1KeysVerifyKeyResponse$ {
    export type Inbound = {
        keyId?: string | undefined;
        valid: boolean;
        name?: string | undefined;
        ownerId?: string | undefined;
        meta?: Record<string, any> | undefined;
        expires?: number | undefined;
        ratelimit?: V1KeysVerifyKeyResponseRatelimit$.Inbound | undefined;
        remaining?: number | undefined;
        code?: Code | undefined;
        enabled?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<V1KeysVerifyKeyResponse, z.ZodTypeDef, Inbound> = z
        .object({
            keyId: z.string().optional(),
            valid: z.boolean(),
            name: z.string().optional(),
            ownerId: z.string().optional(),
            meta: z.record(z.any()).optional(),
            expires: z.number().optional(),
            ratelimit: z.lazy(() => V1KeysVerifyKeyResponseRatelimit$.inboundSchema).optional(),
            remaining: z.number().optional(),
            code: Code$.optional(),
            enabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.keyId === undefined ? null : { keyId: v.keyId }),
                valid: v.valid,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.expires === undefined ? null : { expires: v.expires }),
                ...(v.ratelimit === undefined ? null : { ratelimit: v.ratelimit }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.enabled === undefined ? null : { enabled: v.enabled }),
            };
        });

    export type Outbound = {
        keyId?: string | undefined;
        valid: boolean;
        name?: string | undefined;
        ownerId?: string | undefined;
        meta?: Record<string, any> | undefined;
        expires?: number | undefined;
        ratelimit?: V1KeysVerifyKeyResponseRatelimit$.Outbound | undefined;
        remaining?: number | undefined;
        code?: Code | undefined;
        enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V1KeysVerifyKeyResponse> = z
        .object({
            keyId: z.string().optional(),
            valid: z.boolean(),
            name: z.string().optional(),
            ownerId: z.string().optional(),
            meta: z.record(z.any()).optional(),
            expires: z.number().optional(),
            ratelimit: z.lazy(() => V1KeysVerifyKeyResponseRatelimit$.outboundSchema).optional(),
            remaining: z.number().optional(),
            code: Code$.optional(),
            enabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.keyId === undefined ? null : { keyId: v.keyId }),
                valid: v.valid,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.expires === undefined ? null : { expires: v.expires }),
                ...(v.ratelimit === undefined ? null : { ratelimit: v.ratelimit }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.enabled === undefined ? null : { enabled: v.enabled }),
            };
        });
}
