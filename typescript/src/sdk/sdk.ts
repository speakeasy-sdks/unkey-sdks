/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Apis } from "./apis";
import { Keys } from "./keys";
import { Liveness } from "./liveness";

export class UnkeyTs extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _liveness?: Liveness;
    get liveness() {
        return (this._liveness ??= new Liveness(this.options$));
    }

    private _keys?: Keys;
    get keys() {
        return (this._keys ??= new Keys(this.options$));
    }

    private _apis?: Apis;
    get apis() {
        return (this._apis ??= new Apis(this.options$));
    }
}
